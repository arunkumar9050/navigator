/*
Copyright 2017 Jetstack Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	navigator "github.com/jetstack-experimental/navigator/pkg/apis/navigator"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PilotLister helps list Pilots.
type PilotLister interface {
	// List lists all Pilots in the indexer.
	List(selector labels.Selector) (ret []*navigator.Pilot, err error)
	// Pilots returns an object that can list and get Pilots.
	Pilots(namespace string) PilotNamespaceLister
	PilotListerExpansion
}

// pilotLister implements the PilotLister interface.
type pilotLister struct {
	indexer cache.Indexer
}

// NewPilotLister returns a new PilotLister.
func NewPilotLister(indexer cache.Indexer) PilotLister {
	return &pilotLister{indexer: indexer}
}

// List lists all Pilots in the indexer.
func (s *pilotLister) List(selector labels.Selector) (ret []*navigator.Pilot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*navigator.Pilot))
	})
	return ret, err
}

// Pilots returns an object that can list and get Pilots.
func (s *pilotLister) Pilots(namespace string) PilotNamespaceLister {
	return pilotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PilotNamespaceLister helps list and get Pilots.
type PilotNamespaceLister interface {
	// List lists all Pilots in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*navigator.Pilot, err error)
	// Get retrieves the Pilot from the indexer for a given namespace and name.
	Get(name string) (*navigator.Pilot, error)
	PilotNamespaceListerExpansion
}

// pilotNamespaceLister implements the PilotNamespaceLister
// interface.
type pilotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Pilots in the indexer for a given namespace.
func (s pilotNamespaceLister) List(selector labels.Selector) (ret []*navigator.Pilot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*navigator.Pilot))
	})
	return ret, err
}

// Get retrieves the Pilot from the indexer for a given namespace and name.
func (s pilotNamespaceLister) Get(name string) (*navigator.Pilot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(navigator.Resource("pilot"), name)
	}
	return obj.(*navigator.Pilot), nil
}
